{
  "stats": {
    "suites": 4,
    "tests": 6,
    "passes": 5,
    "pending": 0,
    "failures": 1,
    "start": "2025-09-13T06:07:06.587Z",
    "end": "2025-09-13T06:07:31.655Z",
    "duration": 25068,
    "testsRegistered": 6,
    "passPercent": 83.33333333333334,
    "pendingPercent": 0,
    "other": 1,
    "hasOther": true,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "37107ac6-8bb8-408a-9742-fc45629f639f",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "90f45acb-ea23-47e5-b01d-7a3d18fe2680",
          "title": "Test cases for Windows Handling",
          "fullFile": "E:\\Selenium_Javascript\\test\\windowsHandling.js",
          "file": "\\test\\windowsHandling.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Test cases for Windows Handling\"",
              "fullTitle": "Test cases for Windows Handling \"before all\" hook in \"Test cases for Windows Handling\"",
              "timedOut": null,
              "duration": 7488,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": null,
              "context": null,
              "code": "driver = new Builder().forBrowser(\"chrome\").build();",
              "err": {},
              "uuid": "29f8745d-d57f-44c0-90e2-00ff424c7287",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Test cases for Windows Handling\"",
              "fullTitle": "Test cases for Windows Handling \"after all\" hook in \"Test cases for Windows Handling\"",
              "timedOut": null,
              "duration": 63,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": null,
              "context": null,
              "code": "await driver.quit();",
              "err": {},
              "uuid": "e9880ea9-1afd-4f3e-8643-18c5e0e8f92b",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Windows Handling",
              "fullTitle": "Test cases for Windows Handling Windows Handling",
              "timedOut": null,
              "duration": 7019,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n    await driver.manage().window().maximize();\n    await driver.get(\"https://the-internet.herokuapp.com/\");\n    await driver.findElement(By.linkText(\"Multiple Windows\")).click();\n    await driver.wait(\n      until.elementLocated(By.xpath(\"//div[@class='example']/h3\")),\n      10000\n    );\n    let text = await driver\n      .findElement(By.xpath(\"//div[@class='example']/h3\"))\n      .getText();\n    expect(text).to.equal(\"Opening a new window\");\n    console.log(\"'Opening a new window' page is displayed\");\n    await driver.findElement(By.linkText(\"Click Here\")).click();\n    let handles = await driver.getAllWindowHandles();\n    // console.log(handles);\n    // switch to the new window\n    await driver.switchTo().window(handles[1]);\n    let newWindowTitle= await driver.getTitle();\n    console.log(newWindowTitle);\n    expect(newWindowTitle).to.equal(\"New Window\");\n    console.log(\"New Window page is displayed\");\n} catch (error) {\n    console.error(error);\n    throw error;\n}",
              "err": {},
              "uuid": "97f8d00d-14fd-4731-816b-9ed6618d9d8a",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "97f8d00d-14fd-4731-816b-9ed6618d9d8a"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 7019,
          "root": false,
          "rootEmpty": false,
          "_timeout": null
        },
        {
          "uuid": "6a47092e-c805-46f4-84dc-b4f71c1ae338",
          "title": "Test cases for Hovers",
          "fullFile": "E:\\Selenium_Javascript\\test\\Hovers.js",
          "file": "\\test\\Hovers.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Test cases for Hovers\"",
              "fullTitle": "Test cases for Hovers \"before all\" hook in \"Test cases for Hovers\"",
              "timedOut": null,
              "duration": 7497,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": null,
              "context": null,
              "code": "driver = new Builder().forBrowser(\"chrome\").build();",
              "err": {},
              "uuid": "c368eaf8-23f0-49df-835d-acc6d0eaf9e5",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Test cases for Hovers\"",
              "fullTitle": "Test cases for Hovers \"after all\" hook in \"Test cases for Hovers\"",
              "timedOut": null,
              "duration": 49,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": null,
              "context": null,
              "code": "await driver.quit();",
              "err": {},
              "uuid": "20eb4864-b2ae-4f15-b3dd-53c34031b160",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Hovers",
              "fullTitle": "Test cases for Hovers Hovers",
              "timedOut": null,
              "duration": 7180,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "try {\n  await driver.manage().window().maximize();\n  await driver.get(\"https://the-internet.herokuapp.com/\");\n  await driver.findElement(By.linkText(\"Hovers\")).click();\n  await driver.wait(\n    until.elementLocated(By.xpath(\"//h3[contains(text(),'Hovers')]\")),\n    10000\n  );\n  let text = await driver\n    .findElement(By.xpath(\"//h3[contains(text(),'Hovers')]\"))\n    .getText();\n  // assert.strictEqual(text, \"Hovers\");\n  chai.expect(text).to.equal(\"Hovers\");\n  console.log(\"Hovers page is displayed\");\n  let hoverElement = await driver.findElement(\n    By.xpath(\"//*[@class='example']/div[2]\")\n  );\n  const action = driver.actions({ async: true });\n  await action.move({ origin: hoverElement }).perform();\n  // await action.click().perform();\n  await driver.wait(\n    until.elementLocated(By.xpath(\"//h5[contains(text(),'name: user2')]\")),\n    10000\n  );\n  let username = await driver\n    .findElement(By.xpath(\"//h5[contains(text(),'name: user2')]\"))\n    .getText();\n  console.log(username);\n  chai.expect(username).to.equal(\"name: user2\");\n  console.log(\"User2 is displayed\");\n} catch (error) {\n  console.error(error);\n  throw error;\n}",
              "err": {
                "message": "AssertionError: expected '' to equal 'name: user2'",
                "estack": "AssertionError: expected '' to equal 'name: user2'\n    at Context.<anonymous> (test\\Hovers.js:46:32)\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)",
                "diff": "+ name: user2\n"
              },
              "uuid": "6771b86b-1e26-4a62-ada6-bdedde0a924d",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "6771b86b-1e26-4a62-ada6-bdedde0a924d"
          ],
          "pending": [],
          "skipped": [],
          "duration": 7180,
          "root": false,
          "rootEmpty": false,
          "_timeout": null
        },
        {
          "uuid": "75cdef1a-a677-4a5f-9816-aa1d5c8f1268",
          "title": "Test cases for Waits",
          "fullFile": "E:\\Selenium_Javascript\\test\\waits.js",
          "file": "\\test\\waits.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Test cases for Waits\"",
              "fullTitle": "Test cases for Waits \"before all\" hook in \"Test cases for Waits\"",
              "timedOut": null,
              "duration": 7506,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": null,
              "context": null,
              "code": "driver = new Builder().forBrowser(\"chrome\").build();",
              "err": {},
              "uuid": "59d8f06a-2edf-4ede-b49f-b6669df2252a",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Test cases for Waits\"",
              "fullTitle": "Test cases for Waits \"after all\" hook in \"Test cases for Waits\"",
              "timedOut": null,
              "duration": 73,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": null,
              "context": null,
              "code": "await driver.quit();",
              "err": {},
              "uuid": "381dd526-57a7-4aa1-8fe4-e73d5b1cb7d5",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Implicit Wait",
              "fullTitle": "Test cases for Waits Implicit Wait",
              "timedOut": null,
              "duration": 7565,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n  console.log(\"wait file running\");\n  // driver.manage().window().maximize();\n  driver.get(\n    \"https://practicetestautomation.com/practice-test-login/\"\n    );\n    driver.manage().window().maximize();\n  //   Using Implicit wait, which is set for the entire session\n  await driver.manage().setTimeouts({ implicit: 1000 });\n  await driver\n    .findElement(By.id(\"username\"))\n    .sendKeys(\"student\", Key.RETURN);\n  await driver\n    .findElement(By.id(\"password\"))\n    .sendKeys(\"Password123\", Key.RETURN);\n  await driver.findElement(By.id(\"submit\")).click();\n  let text = await driver\n    .findElement(By.xpath(\"//h1[@class='post-title']\"))\n    .getText();\n  expect(text).to.equal(\"Logged In Successfully\");\n  console.log(\"Login Successful\");\n} catch (error) {\n    console.error(error);\n    throw error;\n}",
              "err": {},
              "uuid": "386d849d-1f19-4982-813d-c81d7a05c62b",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Explicit Wait",
              "fullTitle": "Test cases for Waits Explicit Wait",
              "timedOut": null,
              "duration": 894,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n    console.log(\"Explicit wait test case running\");\n    // driver.manage().window().maximize();\n    driver.get(\n        \"https://practicetestautomation.com/practice-test-login/\"\n    );\n    driver.manage().window().maximize();\n    await driver\n        .findElement(By.id(\"username\"))\n        .sendKeys(\"student\", Key.RETURN);\n    await driver\n        .findElement(By.id(\"password\"))\n        .sendKeys(\"Password123\", Key.RETURN);\n    await driver.findElement(By.id(\"submit\")).click();\n    // Using Explicit wait, which is set for a specific element\n    // wait for the element to be present\n    await driver.wait(until.elementLocated(By.xpath(\"//h1[@class='post-title']\")), 10000);\n    let text = await driver\n        .findElement(By.xpath(\"//h1[@class='post-title']\")).getText();\n    expect(text).to.equal(\"Logged In Successfully\");\n}\ncatch (error) {\n    console.error(error);\n    throw error;\n}",
              "err": {},
              "uuid": "5ff44e8b-713f-4812-9dfb-07723ce75d7a",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "386d849d-1f19-4982-813d-c81d7a05c62b",
            "5ff44e8b-713f-4812-9dfb-07723ce75d7a"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 8459,
          "root": false,
          "rootEmpty": false,
          "_timeout": null
        },
        {
          "uuid": "e0807082-4e04-4068-9623-98d69f3ab1b6",
          "title": "Login Scenario",
          "fullFile": "E:\\Selenium_Javascript\\test\\usingMocha.js",
          "file": "\\test\\usingMocha.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Login to the application with valid credentials",
              "fullTitle": "Login Scenario Login to the application with valid credentials",
              "timedOut": null,
              "duration": 18928,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let driver = await new Builder().forBrowser(\"chrome\").build();\ntry {\n    await driver.manage().window().maximize();\n    await driver.get(\"https://practicetestautomation.com/practice-test-login/\");\n    await driver.sleep(2000);\n    await driver.findElement(By.id(\"username\")).sendKeys(\"student\", Key.RETURN);\n    await driver.findElement(By.id(\"password\")).sendKeys(\"Password123\", Key.RETURN);\n    await driver.findElement(By.id(\"submit\")).click();\n    // built in  node assertions in JS\n    let expectedresult = \"Logged In Successfully\";\n    let actualresult = await driver.findElement(By.xpath(\"//h1[@class='post-title']\")).getAttribute(\"innerHTML\");\n    console.log(actualresult);\n    assert.strictEqual(actualresult, expectedresult);\n    // Using Chai Assertion Library\n    if (actualresult.should.equal(expectedresult))\n        console.log(\" Login Successful\");\n    else\n        console.log(\"Login Failed\");\n    if (await driver.findElement(By.xpath(\"//*[contains(text(),'Log out')]\")).isDisplayed()) {\n        console.log(\"Log out button is displayed\");\n        await driver.findElement(By.xpath(\"//*[contains(text(),'Log out')]\")).click();\n    } else {\n        console.log(\"Log out button is not displayed\");\n    }\n}\ncatch (error) {\n    console.error(error);\n}\nfinally {\n    await driver.quit();\n}",
              "err": {},
              "uuid": "6aa44d3e-7fbf-4b67-9bf7-d9f50a3bec46",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Login to the application with invalid username",
              "fullTitle": "Login Scenario Login to the application with invalid username",
              "timedOut": null,
              "duration": 5730,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let driver = await new Builder().forBrowser(\"chrome\").build();\ntry {\n  await driver.manage().window().maximize();\n  await driver.get(\n    \"https://practicetestautomation.com/practice-test-login/\"\n  );\n  await driver.sleep(2000);\n  await driver\n    .findElement(By.id(\"username\"))\n    .sendKeys(\"prudent\", Key.RETURN);\n  await driver\n    .findElement(By.id(\"password\"))\n    .sendKeys(\"Password123\", Key.RETURN);\n  await driver.findElement(By.id(\"submit\")).click();\n  // built in  node assertions in JS\n  let expectedresult = \"Logged In Successfully\";\n  let actualresult = await driver\n    .findElement(By.xpath(\"//h1[@class='post-title']\"))\n    .getAttribute(\"innerHTML\");\n  console.log(actualresult);\n  assert.strictEqual(actualresult, expectedresult);\n  // Using Chai Assertion Library\n  if (actualresult.should.equal(expectedresult))\n    console.log(\" Login Successful\");\n  else console.log(\"Login Failed\");\n  if (\n    await driver\n      .findElement(By.xpath(\"//*[contains(text(),'Log out')]\"))\n      .isDisplayed()\n  ) {\n    console.log(\"Log out button is displayed\");\n    await driver\n      .findElement(By.xpath(\"//*[contains(text(),'Log out')]\"))\n      .click();\n  } else {\n    console.log(\"Log out button is not displayed\");\n  }\n} catch (error) {\n  console.error(error);\n} finally {\n  await driver.quit();\n}",
              "err": {},
              "uuid": "1d9b46c1-84f6-46d9-ad2f-8505e2aea67b",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "6aa44d3e-7fbf-4b67-9bf7-d9f50a3bec46",
            "1d9b46c1-84f6-46d9-ad2f-8505e2aea67b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 24658,
          "root": false,
          "rootEmpty": false,
          "_timeout": null
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 0
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.2.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "E:/Selenium_Javascript/testReports/testResults",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "E:/Selenium_Javascript/mochawesome-report",
        "reportFilename": "E:/Selenium_Javascript/testReports/testResults"
      },
      "version": "6.2.0"
    }
  }
}