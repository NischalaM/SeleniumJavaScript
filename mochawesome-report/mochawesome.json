{
  "stats": {
    "suites": 1,
    "tests": 2,
    "passes": 2,
    "pending": 0,
    "failures": 0,
    "start": "2025-05-14T05:02:26.519Z",
    "end": "2025-05-14T05:02:44.054Z",
    "duration": 17535,
    "testsRegistered": 2,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "bc6c3345-bdca-4cdf-867d-d14ca7813d51",
      "title": "",
      "fullFile": "E:\\Selenium_Javascript\\test\\usingMocha.js",
      "file": "\\test\\usingMocha.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "66cbcc20-dd20-46e4-a615-0a06f9e62861",
          "title": "Login Scenario",
          "fullFile": "E:\\Selenium_Javascript\\test\\usingMocha.js",
          "file": "\\test\\usingMocha.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Login to the application with valid credentials",
              "fullTitle": "Login Scenario Login to the application with valid credentials",
              "timedOut": null,
              "duration": 10982,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let driver = await new Builder().forBrowser(\"chrome\").build();\ntry {\n    await driver.manage().window().maximize();\n    await driver.get(\"https://practicetestautomation.com/practice-test-login/\");\n    await driver.sleep(2000);\n    await driver.findElement(By.id(\"username\")).sendKeys(\"student\", Key.RETURN);\n    await driver.findElement(By.id(\"password\")).sendKeys(\"Password123\", Key.RETURN);\n    await driver.findElement(By.id(\"submit\")).click();\n    // built in  node assertions in JS\n    let expectedresult = \"Logged In Successfully\";\n    let actualresult = await driver.findElement(By.xpath(\"//h1[@class='post-title']\")).getAttribute(\"innerHTML\");\n    console.log(actualresult);\n    assert.strictEqual(actualresult, expectedresult);\n    // Using Chai Assertion Library\n    if (actualresult.should.equal(expectedresult))\n        console.log(\" Login Successful\");\n    else\n        console.log(\"Login Failed\");\n    if (await driver.findElement(By.xpath(\"//*[contains(text(),'Log out')]\")).isDisplayed()) {\n        console.log(\"Log out button is displayed\");\n        await driver.findElement(By.xpath(\"//*[contains(text(),'Log out')]\")).click();\n    } else {\n        console.log(\"Log out button is not displayed\");\n    }\n}\ncatch (error) {\n    console.error(error);\n}\nfinally {\n    await driver.quit();\n}",
              "err": {},
              "uuid": "a66622f1-d2d2-46a2-8ebc-6435fcaaddf0",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Login to the application with invalid username",
              "fullTitle": "Login Scenario Login to the application with invalid username",
              "timedOut": null,
              "duration": 5910,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let driver = await new Builder().forBrowser(\"chrome\").build();\ntry {\n  await driver.manage().window().maximize();\n  await driver.get(\n    \"https://practicetestautomation.com/practice-test-login/\"\n  );\n  await driver.sleep(2000);\n  await driver\n    .findElement(By.id(\"username\"))\n    .sendKeys(\"prudent\", Key.RETURN);\n  await driver\n    .findElement(By.id(\"password\"))\n    .sendKeys(\"Password123\", Key.RETURN);\n  await driver.findElement(By.id(\"submit\")).click();\n  // built in  node assertions in JS\n  let expectedresult = \"Logged In Successfully\";\n  let actualresult = await driver\n    .findElement(By.xpath(\"//h1[@class='post-title']\"))\n    .getAttribute(\"innerHTML\");\n  console.log(actualresult);\n  assert.strictEqual(actualresult, expectedresult);\n  // Using Chai Assertion Library\n  if (actualresult.should.equal(expectedresult))\n    console.log(\" Login Successful\");\n  else console.log(\"Login Failed\");\n  if (\n    await driver\n      .findElement(By.xpath(\"//*[contains(text(),'Log out')]\"))\n      .isDisplayed()\n  ) {\n    console.log(\"Log out button is displayed\");\n    await driver\n      .findElement(By.xpath(\"//*[contains(text(),'Log out')]\"))\n      .click();\n  } else {\n    console.log(\"Log out button is not displayed\");\n  }\n} catch (error) {\n  console.error(error);\n} finally {\n  await driver.quit();\n}",
              "err": {},
              "uuid": "d2344cf7-a651-4b99-aab2-2a10b7a77162",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a66622f1-d2d2-46a2-8ebc-6435fcaaddf0",
            "d2344cf7-a651-4b99-aab2-2a10b7a77162"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 16892,
          "root": false,
          "rootEmpty": false,
          "_timeout": null
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 0
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.2.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}